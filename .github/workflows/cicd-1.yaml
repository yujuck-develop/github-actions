# CI/CD 시나리오 1
# 가정
# - dev 브랜치를 개발환경으로 사용할 떄, 개발 환경에만 배포하는 CI/CD를 구성
# branch
# - dev
# 요구사항
# - 특정 path에 대해서만 실행
# - dev branch로 PR이 생성 & 동기화될 때 테스트 작업 실행 (CI)
# - PR이 dev branch로 머지되면, 이미지 빌드하고 개발 환경에 배포 (CD)
# - 배포 성공 여부를 슬랙으로 전송

name: cicd-1
on:
  pull_request:
    types: [opened, synchronize, closed] # closed가 있어야 PR이 머지되었을 때 실행 가능
    branches: [dev]
    paths:
      - 'my-app/**'

jobs:
  test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - name: install dependencies
        run: |
          cd my-app
          npm ci
      - name: npm build
        run: |
          cd my-app
          npm run build

  image-deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions: # 실행되는 액션들이 수행할 수 있는 작업의 범위나 권한을 정의할 수 있음. 여기서는 AWS 리소스에 접근하기 위해 필요한 권한을 설정
      id-token: write
      contents: read
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
      - name: docker build & push
        run: | # github 커밋의 sha를 도커 이미지의 태그로 사용. 이렇게 하면 해당 이미지가 어떤 코드로부터 생성되었는지 확인 가능 -> 버전 관리 용이함
          docker build -f Dockerfile --tag ${{secrets.REGISTRY}}/${{vars.REPOSITORY}}:${{github.sha}}  
          docker push ${{secrets.REGISTRY}}/${{vars.REPOSITORY}}:${{github.sha}}

  deploy:
    runs-on: ubuntu-latest
    needs: [image-deploy]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - name: setup kubectl
        uses: azure/setup-kubectl@v3 # 쿠버네티스 커맨드 사용을 위해 액션 사용
        with:
          version: latest
      - name: setup helm
        uses: azure/setup-helm@v3 # helm 사용을 위해 액션 사용
        with:
          version: v3.11.1
      - name: access kubernetes
        run: aws eks update-kubeconfig --name ${{ vars.CLUSTER_NAME }}
      - name: deploy
        id: status
        run: |
          helm upgrade --install my-app kubernetes/my-app --create-namespace --namespace my-app-${{vars.SUFFIX}} \
          --set image.tag=${{github.sha}} \
          --set image.repository=${{secrets.REGISTRY}}/${{vars.REPOSITORY}}
      - name: slack notification
        if: always()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "text": "message",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Environment: dev, Deploy Result : ${{ steps.status.outcome }}, Repository: ${{github.repository}}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
